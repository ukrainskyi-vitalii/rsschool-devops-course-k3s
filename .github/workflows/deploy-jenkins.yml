name: Terraform and Jenkins Deployment

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
  # push: // uncomment if you need to run terraform apply only on merge event
    # branches:
      # - main

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_github_repo_name: ${{ vars.GH_REPO_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_GITHUB_ACTIONS_ROLE_NAME: ${{ vars.AWS_GITHUB_ACTIONS_ROLE_NAME }}

jobs:
  terraform-check:
    name: Terraform Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Run terraform fmt to check formatting
        run: terraform fmt -check

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
#    if: github.ref == 'refs/heads/main' // uncomment if you need to run terraform apply only on merge event
    
    outputs:
      k3s_master_ip: ${{ steps.get_ip.outputs.k3s_master_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get k3s master IP
        id: get_ip
        run: |
          K3S_MASTER_IP=$(terraform output -raw k3s_master_ip 2>/dev/null || echo "NOT_FOUND")
          echo "K3S_MASTER_IP=$K3S_MASTER_IP" >> $GITHUB_ENV
          echo "::set-output name=k3s_master_ip::$K3S_MASTER_IP"
    
  deploy-jenkins:
    name: Deploy Jenkins
    runs-on: ubuntu-latest
    needs: terraform-apply

    env:
      HOSTNAME: ${{ needs.terraform-apply.outputs.k3s_master_ip }}
      USER_NAME: ${{ vars.USER_NAME }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Setup SSH Key
        run: bash ./.github/scripts/setup_ssh.sh
          
      - name: Copy Jenkins Configurations
        run: bash ./.github/scripts/jenkins_configs.sh
        
      - name: Install k3s, Helm, and kubectl on remote server
        run: ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} 'bash -s' < ./.github/scripts/install_tools.sh
  
      - name: Initialize k3s and Jenkins Namespace on remote server
        run: ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} 'bash -s' < ./.github/scripts/initialize_k3s.sh
    
      - name: Deploy Jenkins on remote server
        run: ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} 'bash -s' < ./.github/scripts/deploy_jenkins.sh

      - name: Cleanup SSH Key
        run: rm -f private_key

  deploy-prometheus:
    name: Deploy Prometheus
    runs-on: ubuntu-latest
    needs: 
      - deploy-jenkins
      - terraform-apply

    env:
      HOSTNAME: ${{ needs.terraform-apply.outputs.k3s_master_ip }}
      USER_NAME: ${{ vars.USER_NAME }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Setup SSH Key
        run: bash ./.github/scripts/setup_ssh.sh

      - name: Copy Prometheus Configuration
        run: scp -o StrictHostKeyChecking=no -i private_key ./.github/config/prometheus-config.yaml ${{ env.USER_NAME }}@${{ env.HOSTNAME }}:/home/ubuntu/prometheus-config.yaml
      
      - name: Install Prometheus using Helm on remote server
        run: ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} 'bash -s' < ./.github/scripts/deploy_prometheus.sh

      - name: Cleanup SSH Key
        run: rm -f private_key

  deploy-grafana:
    name: Deploy Grafana
    runs-on: ubuntu-latest
    needs: 
      - deploy-jenkins
      - terraform-apply
      
    env:
      HOSTNAME: ${{ needs.terraform-apply.outputs.k3s_master_ip }}
      USER_NAME: ${{ vars.USER_NAME }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH Key
        run: bash ./.github/scripts/setup_ssh.sh
      
      - name: Install Grafana using Helm on remote server
        run: ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} 'bash -s' < ./.github/scripts/deploy_grafana.sh
      
      - name: Cleanup SSH Key
        run: rm -f private_key

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
