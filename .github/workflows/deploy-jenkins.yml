name: Terraform and Jenkins Deployment

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
  # push: // uncomment if you need to run terraform apply only on merge event
    # branches:
      # - main

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_github_repo_name: ${{ vars.GH_REPO_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_GITHUB_ACTIONS_ROLE_NAME: ${{ vars.AWS_GITHUB_ACTIONS_ROLE_NAME }}

jobs:
  terraform-check:
    name: Terraform Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Run terraform fmt to check formatting
        run: terraform fmt -check

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
#    if: github.ref == 'refs/heads/main' // uncomment if you need to run terraform apply only on merge event
    
    outputs:
      k3s_master_ip: ${{ steps.get_ip.outputs.k3s_master_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get k3s master IP
        id: get_ip
        run: |
          K3S_MASTER_IP=$(terraform output -raw k3s_master_ip 2>/dev/null || echo "NOT_FOUND")
          echo "K3S_MASTER_IP=$K3S_MASTER_IP" >> $GITHUB_ENV
          echo "::set-output name=k3s_master_ip::$K3S_MASTER_IP"
    
  deploy-jenkins:
    name: Deploy Jenkins
    runs-on: ubuntu-latest
    needs: terraform-apply

    env:
      HOSTNAME: ${{ needs.terraform-apply.outputs.k3s_master_ip }}
      USER_NAME: ${{ vars.USER_NAME }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Setup SSH Key
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
  
      - name: Deploy Jenkins
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} "
              # Install k3s
              curl -sfL https://get.k3s.io | sh -

              # Change permissions to allow access to k3s config
              sudo chmod 644 /etc/rancher/k3s/k3s.yaml

              # Set up kubectl to use k3s config
              export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

              # Install Helm
              curl -L https://get.helm.sh/helm-v3.16.2-linux-amd64.tar.gz -o helm.tar.gz &&
              tar -zxvf helm.tar.gz &&
              sudo mv linux-amd64/helm /usr/local/bin/helm &&
              rm -rf helm.tar.gz linux-amd64 &&
              helm version &&

              # Install kubectl
              curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" &&
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl &&
              rm kubectl &&
              kubectl version --client &&

              # Add Jenkins Helm repository
              /usr/local/bin/helm repo add jenkins https://charts.jenkins.io &&
              /usr/local/bin/helm repo update &&
                
              # Check k3s readiness
              until /usr/local/bin/kubectl get nodes; do
                  echo "Waiting for k3s server to be ready..."
                  sleep 5
              done &&
              
              # Create Jenkins namespace
              sudo /usr/local/bin/kubectl create namespace jenkins &&
              sudo /usr/local/bin/kubectl get namespaces &&

              # Step 3: Create Jenkins volume directory and set permissions
              sudo mkdir -p /data/jenkins-volume &&
              sudo chmod 777 /data/jenkins-volume &&
              ls -ld /data/jenkins-volume &&

              # Step 4: Apply persistent volume configuration
              sudo /usr/local/bin/kubectl apply -f jenkins-volume.yaml &&

              # Step 5: Apply service account configuration
              sudo /usr/local/bin/kubectl apply -f jenkins-sa.yaml &&

              # Step 6: Install Jenkins using Helm
              /usr/local/bin/helm install jenkins -n jenkins -f jenkins-values.yaml jenkins/jenkins
          "

      - name: Cleanup SSH Key
        run: rm -f private_key

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
