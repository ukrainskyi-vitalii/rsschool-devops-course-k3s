name: Terraform and Jenkins Deployment

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
  # push: // uncomment if you need to run terraform apply only on merge event
    # branches:
      # - main

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_github_repo_name: ${{ vars.GH_REPO_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_GITHUB_ACTIONS_ROLE_NAME: ${{ vars.AWS_GITHUB_ACTIONS_ROLE_NAME }}

jobs:
  terraform-check:
    name: Terraform Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Run terraform fmt to check formatting
        run: terraform fmt -check

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
#    if: github.ref == 'refs/heads/main' // uncomment if you need to run terraform apply only on merge event

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get k3s master IP
        id: get_ip
        run: |
          echo "Retrieving k3s master IP..."
          K3S_MASTER_IP=$(terraform output -raw k3s_master_ip 2>/dev/null || echo "NOT_FOUND")
          echo "K3S_MASTER_IP=$K3S_MASTER_IP" >> $GITHUB_ENV
      - name: Check if K3S_MASTER_IP is set
        run: |
          echo "K3S_MASTER_IP from GITHUB_ENV is: $K3S_MASTER_IP"
        env:
          K3S_MASTER_IP: ${{ env.K3S_MASTER_IP }}
    
  deploy-jenkins:
    name: Deploy Jenkins
    runs-on: ubuntu-latest
    needs: terraform-apply

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show k3s master IP
        run: |
          echo "Using K3S_MASTER_IP: ${{ env.K3S_MASTER_IP }}"

      - name: Add Jenkins Helm repo
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.K3S_MASTER_IP }}
          username: ec2-user
          key: ${{ secrets.K3S_MASTER_SSH_KEY }}
          script: |
            helm repo add jenkins https://charts.jenkins.io
            helm repo update

      - name: Create Jenkins namespace
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.K3S_MASTER_IP }}
          username: ec2-user
          key: ${{ secrets.K3S_MASTER_SSH_KEY }}
          script: |
            kubectl create namespace jenkins || true

      - name: Create persistent volume directory
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.K3S_MASTER_IP }}
          username: ec2-user
          key: ${{ secrets.K3S_MASTER_SSH_KEY }}
          script: |
            sudo mkdir -p /data/jenkins-volume/
            sudo chmod 777 /data/jenkins-volume/

      - name: Apply persistent volume configuration
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.K3S_MASTER_IP }}
          username: ec2-user
          key: ${{ secrets.K3S_MASTER_SSH_KEY }}
          script: |
            kubectl apply -f helm-configs/jenkins-volume.yaml

      - name: Apply service account configuration
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.K3S_MASTER_IP }}
          username: ec2-user
          key: ${{ secrets.K3S_MASTER_SSH_KEY }}
          script: |
            kubectl apply -f helm-configs/jenkins-sa.yaml

      - name: Install Jenkins using Helm
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.K3S_MASTER_IP }}
          username: ec2-user
          key: ${{ secrets.K3S_MASTER_SSH_KEY }}
          script: |
            helm upgrade --install jenkins jenkins/jenkins -n jenkins -f helm-configs/jenkins-values.yaml

      - name: Verify Jenkins deployment status
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.K3S_MASTER_IP }}
          username: ec2-user
          key: ${{ secrets.K3S_MASTER_SSH_KEY }}
          script: |
            echo "Checking Jenkins deployment status..."
            kubectl rollout status deployment/jenkins -n jenkins
            kubectl get pods -n jenkins

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
