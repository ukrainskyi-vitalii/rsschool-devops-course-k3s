name: Terraform and Jenkins Deployment

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
  # push: // uncomment if you need to run terraform apply only on merge event
    # branches:
      # - main

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_github_repo_name: ${{ vars.GH_REPO_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_GITHUB_ACTIONS_ROLE_NAME: ${{ vars.AWS_GITHUB_ACTIONS_ROLE_NAME }}

jobs:
  terraform-check:
    name: Terraform Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Run terraform fmt to check formatting
        run: terraform fmt -check

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
#    if: github.ref == 'refs/heads/main' // uncomment if you need to run terraform apply only on merge event
    
    outputs:
      k3s_master_ip: ${{ steps.get_ip.outputs.k3s_master_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get k3s master IP
        id: get_ip
        run: |
          K3S_MASTER_IP=$(terraform output -raw k3s_master_ip 2>/dev/null || echo "NOT_FOUND")
          echo "K3S_MASTER_IP=$K3S_MASTER_IP" >> $GITHUB_ENV
          echo "::set-output name=k3s_master_ip::$K3S_MASTER_IP"
    
  deploy-jenkins:
    name: Deploy Jenkins
    runs-on: ubuntu-latest
    needs: terraform-apply

    env:
      HOSTNAME: ${{ needs.terraform-apply.outputs.k3s_master_ip }}
      USER_NAME: ${{ vars.USER_NAME }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Setup SSH Key
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
  
      - name: Deploy Jenkins
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} "
              # Add Jenkins Helm repository
              helm repo add jenkins https://charts.jenkins.io &&
              helm repo update &&
                
              # Create Jenkins namespace
              kubectl create namespace jenkins
              kubectl get namespaces

              # Step 3: Create Jenkins volume directory and set permissions
              sudo mkdir -p /data/jenkins-volume
              sudo chmod 777 /data/jenkins-volume
              ls -ld /data/jenkins-volume

              # Step 4: Apply persistent volume configuration
              kubectl apply -f jenkins-volume.yaml

              # Step 5: Apply service account configuration
              kubectl apply -f jenkins-sa.yaml

              # Step 6: Install Jenkins using Helm
              helm install jenkins -n jenkins -f jenkins-values.yaml jenkins/jenkins

              # Step 7: Verify Jenkins pod and service status
              kubectl get pods -n jenkins
              kubectl get svc -n jenkins

              # Step 8: Retrieve admin password
              jsonpath="{.data.jenkins-admin-password}"
              secret=$(kubectl get secret -n jenkins jenkins -o jsonpath=$jsonpath)
              echo "Jenkins admin password: $(echo $secret | base64 --decode)"

              # Step 9: Retrieve Jenkins logs
              kubectl logs jenkins-0 -n jenkins
          "

      - name: Cleanup SSH Key
        run: rm -f private_key

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_GITHUB_ACTIONS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
